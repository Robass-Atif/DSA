

// first problem code
ublic class Solution {
    public int[] SmallerNumbersThanCurrent(int[] nums) {
        int[] arr=new int[nums.Length];
        
        int x;
        int count;
        for(int i=0;i<nums.Length;i++)
        {
            x=nums[i];
            count=0;
            for(int j=0;j<nums.Length;j++)
            {
                if(x>nums[j])
                {
                    count++;
                }
                    
            }
            arr[i]=count;
        }
        
        return arr;
        
    }
}

///  code end



//second probelm

public class Solution {
  public int RemoveElement(int[] nums, int val) {
    int index = 0;
    for (int i = 0; i < nums.Length; i++) {
      if (nums[i] != val) {
        nums[index] = nums[i];
        index++;
      }
    }
    return index;
  }
}




//code end

//third problem
public class Solution {
    public bool SearchMatrix(int[][] matrix, int target) {
        int rowLength=matrix[0].Length;
        
        int top=0;
        int bottom=matrix.Length-1;
        int mid=(bottom+top)/2;
        while(top<=bottom)
        {
            mid=(bottom+top)/2;
            if(matrix[mid][0]>target)
            {
                bottom=mid-1;
                
            }
            else if(matrix[mid][rowLength-1]<target)
            {
             top=mid+1;   
            }
            else if((matrix[mid][0]<=target)&&(matrix[mid][rowLength-1]>=target))
            {
                break;
            }
        }
        if ((matrix[mid][0] > target) || (matrix[mid][rowLength - 1] < target))
            return false;
        
        int mincol=0;
        int maxcol=rowLength-1;
        int mid1=(maxcol+mincol)/2;
        while(mincol<=maxcol)
        {
            mid1=(maxcol+mincol)/2;
            if(matrix[mid][mid1]==target)
            {
                return true;
            }
            else if(matrix[mid][mid1]>target)
            {
                maxcol=mid1-1;
            }
            else if(matrix[mid][mid1]<target)
            {
                mincol=mid1+1;
            }
                
        }
        return false;
        
    }
}

//code ended

//fourth problem
public class Solution {
    public int RemoveDuplicates(int[] nums) {
        int count=1;
        for(int i=1;i<nums.Length;i++)
        {
            if(nums[i]!=nums[i-1])
            {
                nums[count]=nums[i];
                count++;
            }
        }
        return count;
        
    }
}
///code ended



// fiveth problem
public class Solution {
    public int MaxSubArray(int[] nums) {
        int max=nums[0];
        int current=nums[0];
        for(int i=1;i<nums.Length;i++)
        {
            
            
            
            if(current+nums[i]>nums[i])
            {
                current+=nums[i];
            }
            else
            {
                current=nums[i];
            }
            if(max<current)
            {
                max=current;
            }
        }
        return max;
        
    }
}
// end code 



/// problem six
public class Solution : VersionControl {
    public int FirstBadVersion(int n) {
        int l=0;
        int r=n;
        int ans=-1;
        while(true){
            int m=l+(r-l)/2;
            if(!IsBadVersion(m)){
                l=m+1;
            }
            else if(IsBadVersion(m-1)){
                r=m-1;
                ans=m-1;
            }
            else{
                return m;
            }
        }
        return ans;
    }
}

//code end

//seven code
public class Solution {
    public int FirstMissingPositive(int[] nums) {
        
      
    Array.Sort(nums);
        int count=1;
        for(int i=0;i<nums.Length;i++)
        {
            if(nums[i]==count)
            {
                count++;
            }
        }
        return count;
    }
}
//code end